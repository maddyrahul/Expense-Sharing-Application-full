// <auto-generated />
using System;
using Data_Access_Layer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data_Access_Layer.Migrations
{
    [DbContext(typeof(ExpenseSharingDbContext))]
    [Migration("20241027124635_add")]
    partial class add
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Data_Access_Layer.Models.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseId"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("PaidById")
                        .HasColumnType("int");

                    b.HasKey("ExpenseId");

                    b.HasIndex("GroupId");

                    b.HasIndex("PaidById");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.GroupMember", b =>
                {
                    b.Property<int>("GroupMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupMemberId"), 1L, 1);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSettled")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GroupMemberId");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "649a0c61-3731-41c3-9410-e1e455f9b129",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            Id = "4df7a234-5a07-4a6a-b7a2-97147a73ec98",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "Admin",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 2,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "72ad9605-b5e2-4b37-a039-a07714bc3c80",
                            Email = "rahul1@gmail.com",
                            EmailConfirmed = false,
                            Id = "725daeba-bca3-4e90-821a-7c0df8bbba2c",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "User",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 3,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "00ef8418-7458-42e2-b15b-a21218a1aa02",
                            Email = "rahul2@gmail.com",
                            EmailConfirmed = false,
                            Id = "7fbce4ab-838d-4f32-8b0c-5fc3927cd229",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "User",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 4,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "81a3ec22-e3ca-4a15-ab3a-7315d7d04b96",
                            Email = "rahul3@gmail.com",
                            EmailConfirmed = false,
                            Id = "cef3d81a-ac5e-41cc-94cb-bd98bb2ac6b4",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "User",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 5,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "48753cdc-c780-49b6-a3b1-97c53878a21c",
                            Email = "rahul4@gmail.com",
                            EmailConfirmed = false,
                            Id = "2810393a-afd8-482f-beb6-f8a0cbb5ca0f",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "User",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 6,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "acf47753-5aed-4abf-b39a-d72d7407a49e",
                            Email = "rahul5@gmail.com",
                            EmailConfirmed = false,
                            Id = "302b528c-c964-4f4c-ba70-4aeeff255df1",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "User",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 7,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "0236b9f1-3c38-47ae-bc60-20b4dd991070",
                            Email = "rahul6@gmail.com",
                            EmailConfirmed = false,
                            Id = "745de563-8b9f-428f-8ff9-21273a0dbe23",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "User",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 8,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "eceb51c0-1ddf-45ff-8119-26bc7ccf9ce6",
                            Email = "rahul7@gmail.com",
                            EmailConfirmed = false,
                            Id = "1c53140e-42d6-4e41-87f1-6c65acd28572",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "User",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            UserId = 9,
                            AccessFailedCount = 0,
                            Balance = 0m,
                            ConcurrencyStamp = "7cda259f-dcf3-4e16-9049-68ae3c25a11c",
                            Email = "rahul8@gmail.com",
                            EmailConfirmed = false,
                            Id = "9e19d706-fd56-47b3-93f4-2f8d14c03716",
                            LockoutEnabled = false,
                            Password = "string",
                            PhoneNumberConfirmed = false,
                            Role = "User",
                            SecurityStamp = "",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Data_Access_Layer.Models.Expense", b =>
                {
                    b.HasOne("Data_Access_Layer.Models.Group", "Group")
                        .WithMany("Expenses")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Access_Layer.Models.User", "PaidBy")
                        .WithMany()
                        .HasForeignKey("PaidById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("PaidBy");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.GroupMember", b =>
                {
                    b.HasOne("Data_Access_Layer.Models.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data_Access_Layer.Models.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.Group", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Data_Access_Layer.Models.User", b =>
                {
                    b.Navigation("GroupMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
